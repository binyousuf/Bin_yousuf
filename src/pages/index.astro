---
// src/pages/index.astro - Improved version with better TypeScript support
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.tsx';
import ProjectsList from '../components/ProjectsList.tsx';
import ProjectsSlideshow from '../components/Slideshow.tsx';
import { projects } from '../data/projects.js';
import type { ImageMetadata } from 'astro';

const currentPath = Astro.url.pathname;

// Group projects by location
const emaarProjects = projects.filter(p => p.location === 'Emaar');
const hmrProjects = projects.filter(p => p.location === 'HMR');

// Define slideshow image interface
interface SlideshowImage {
  src: string;
  alt: string;
}

// Import slideshow images with better type handling
const slideshowImageModules = import.meta.glob<{ default: ImageMetadata }>('../assets/projects/slideshow/*.{webp,jpg,jpeg,png}', { eager: true });

// Format images for the slideshow component with proper typing
let formattedSlideshowImages: SlideshowImage[] = [];

try {
  formattedSlideshowImages = Object.entries(slideshowImageModules)
    .map(([path, module], index) => {
      if (module?.default) {
        return {
          src: module.default.src || module.default,
          alt: `Project Slideshow Image ${index + 1}`
        } as SlideshowImage;
      }
      return null;
    })
    .filter((img): img is SlideshowImage => img !== null)
    .slice(0, 10); // Limit to 10 images for performance
} catch (error) {
  console.warn('Failed to load slideshow images:', error);
}

// Fallback: If no slideshow images found, use project images
if (formattedSlideshowImages.length === 0) {
  formattedSlideshowImages = projects.slice(0, 5).map((project, index) => ({
    src: project.image.src,
    alt: `${project.name} - ${project.location}`
  }));
}
---

<Layout title="BYG-BinYousufGroup">
  <Navigation currentPath={currentPath} client:load />
  
  
  <!-- Slideshow Section - Below Navbar -->
  <section class="w-full mt-10">
    <ProjectsSlideshow 
      images={formattedSlideshowImages}
      autoPlayInterval={2000}
      showDots={true}
      showArrows={false}
      height="60vh"
      client:load 
    />
  </section>
  
  <!-- Main Projects Content -->
  <main class="pt-0">
    <ProjectsList 
      projects={projects}
      emaarProjects={emaarProjects}
      hmrProjects={hmrProjects}
      client:load 
    />
  </main>
</Layout>

<style>
  /* Ensure smooth scrolling without conflicts */
  html {
    scroll-behavior: auto; /* Let GSAP handle smooth scrolling */
  }
  
  /* Prevent layout shifts during loading */
  main {
    min-height: 100vh;
  }
  
  /* Optimize for performance */
  * {
    will-change: auto;
  }
  
  /* Reduce motion for users who prefer it */
  @media (prefers-reduced-motion: reduce) {
    * {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
    }
  }

  /* Slideshow specific optimizations */
  .slideshow-container {
    contain: layout style paint;
  }
</style>

<script>
  // Prevent the main TypeScript animations from running on projects page
  // This ensures no conflicts between React components and TS scroll handlers
  
  // Remove any existing scroll listeners from main.ts
  if (typeof window !== 'undefined') {
    // Clean up any existing main.ts scroll listeners
    const existingHandlers = (window as any).__scrollHandlers || [];
    existingHandlers.forEach((handler: EventListener) => {
      window.removeEventListener('scroll', handler);
    });
    (window as any).__scrollHandlers = [];
    
    // Mark this page as projects page to prevent main.ts initialization
    (window as any).__isProjectsPage = true;
  }
</script>