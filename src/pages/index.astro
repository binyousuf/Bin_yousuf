---
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';
import HeroSection from '../components/HeroSection.astro';
import BottomNavigation from '../components/BottomNavigation.astro';
import ProjectsSidebar from '../components/ProjectsSidebar.astro';
import ProjectsGrid from '../components/ProjectsGrid.astro';
---

<Layout title="IND Design Studio">
  <Navigation />
  <HeroSection />
  <BottomNavigation />
  
  <section class="projects-section">
    <ProjectsSidebar />
    <ProjectsGrid />
  </section>

  <script>
  // Main scroll animation and project interaction
  const projectsSidebar = document.getElementById('projectsSidebar');
  const projectItems = document.querySelectorAll('.project-item');
  const imageItems = document.querySelectorAll('.project-image-item');

  // Function to scroll sidebar to show active project
  function scrollSidebarToActiveProject(activeItem: Element) {
    if (!projectsSidebar || !activeItem) return;
    
    const sidebarRect = projectsSidebar.getBoundingClientRect();
    const activeItemRect = activeItem.getBoundingClientRect();
    
    // Calculate the position of the active item relative to the sidebar
    const activeItemTop = activeItemRect.top - sidebarRect.top;
    const activeItemBottom = activeItemRect.bottom - sidebarRect.top;
    
    // Get sidebar's scrollable height
    const sidebarHeight = projectsSidebar.clientHeight;
    const sidebarScrollTop = projectsSidebar.scrollTop;
    
    // Check if active item is above the visible area
    if (activeItemTop < 0) {
      projectsSidebar.scrollTo({
        top: sidebarScrollTop + activeItemTop - 20, // 20px padding from top
        behavior: 'smooth'
      });
    }
    // Check if active item is below the visible area
    else if (activeItemBottom > sidebarHeight) {
      projectsSidebar.scrollTo({
        top: sidebarScrollTop + (activeItemBottom - sidebarHeight) + 20, // 20px padding from bottom
        behavior: 'smooth'
      });
    }
  }

  // Enhanced project interaction for highlighting and scrolling
  projectItems.forEach((item) => {
    item.addEventListener('click', () => {
      // Remove active class from all items
      projectItems.forEach(pi => pi.classList.remove('active'));
      // Add active class to clicked item
      item.classList.add('active');
      
      // Get the target image ID from data attribute
      const targetId = (item as HTMLElement).dataset.scrollTarget;
      if (typeof targetId === 'string') {
        const targetImage = document.getElementById(targetId);
        
        if (targetImage) {
          // Calculate offset to account for fixed navigation
          const navHeight = 80; // Adjust this based on your nav height
          const elementPosition = targetImage.getBoundingClientRect().top;
          const offsetPosition = elementPosition + window.pageYOffset - navHeight;
          
          // Smooth scroll to the target image
          window.scrollTo({
            top: offsetPosition,
            behavior: 'smooth'
          });
          
          // Optional: Add a highlight effect to the target image
          targetImage.classList.add('highlighted');
          setTimeout(() => {
            targetImage.classList.remove('highlighted');
          }, 2000);
        }
      }
    });
  });

  // Scroll handler for sidebar animation
  function handleScroll() {
    const scrollY = window.scrollY;
    const windowHeight = window.innerHeight;
    
    if (scrollY > windowHeight * 0.8) {
      projectsSidebar?.classList.add('visible');
    } else {
      projectsSidebar?.classList.remove('visible');
    }
  }

  // Highlight sidebar item when scrolling through images
  function highlightActiveProject() {
    const scrollPosition = window.scrollY + window.innerHeight / 2;
    
    imageItems.forEach((image) => {
      const rect = image.getBoundingClientRect();
      const imageTop = rect.top + window.scrollY;
      const imageBottom = imageTop + rect.height;
      
      if (scrollPosition >= imageTop && scrollPosition <= imageBottom) {
        // Remove active from all
        projectItems.forEach(item => item.classList.remove('active'));
        // Add active to corresponding sidebar item
        const projectName = (image as HTMLElement).dataset.project;
        const correspondingItem = document.querySelector(`.project-item[data-project="${projectName}"]`);
        if (correspondingItem) {
          correspondingItem.classList.add('active');
          // Auto-scroll sidebar to show the active project
          scrollSidebarToActiveProject(correspondingItem);
        }
      }
    });
  }

  // Throttled scroll handler for better performance
  let ticking = false;
  function requestTick() {
    if (!ticking) {
      requestAnimationFrame(() => {
        handleScroll();
        highlightActiveProject();
        ticking = false;
      });
      ticking = true;
    }
  }

  window.addEventListener('scroll', requestTick);
  
  // Initial calls
  handleScroll();
</script>

</Layout>

<style>
  .projects-section {
    min-height: 100vh;
    position: relative;
    display: flex;
    padding-top: 12vh;
  }

  @media (max-width: 768px) {
    .projects-section {
      flex-direction: column;
      padding-top: 5vh;
    }
  }
</style>