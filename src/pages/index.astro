---
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';
import HeroSection from '../components/HeroSection.astro';
import BottomNavigation from '../components/BottomNavigation.astro';
import ProjectsSidebar from '../components/ProjectsSidebar.astro';
import ProjectsGrid from '../components/ProjectsGrid.astro';
import { projects } from '../data/projects.js';
---

<Layout title="IND Design Studio">
  <Navigation />
  <HeroSection />
  <BottomNavigation />
  
  <!-- Fullscreen Project Image Animation Container -->
  <div class="fixed top-0 left-0 w-screen h-screen pointer-events-none z-[999]">
    <div 
      class="absolute top-full left-0 w-screen h-screen overflow-hidden opacity-0 transition-all duration-300 ease-out will-change-transform"
      id="animatedProjectImage"
    >
      <img 
        src={projects[0]?.image?.src} 
        alt={projects[0]?.name}
        id="mainAnimatedImage"
        class="w-full h-full object-cover block"
      />
    </div>
  </div>
  
  <div class="h-[110vh] bg-white" id="scrollSpacer"></div>
  
  <section class="min-h-screen relative flex pt-[12vh]">
    <ProjectsSidebar />
    <ProjectsGrid />
  </section>
</Layout>

<script define:vars={{ projects }}>
  // Wait for GSAP to be available
  function waitForGSAP(callback) {
    if (typeof window.gsap !== 'undefined') {
      callback();
    } else {
      setTimeout(() => waitForGSAP(callback), 100);
    }
  }

  // Initialize animation elements
  const elements = {
    projectsSidebar: document.getElementById('projectsSidebar'),
    projectItems: document.querySelectorAll('.project-item'),
    imageItems: document.querySelectorAll('.project-image-item'),
    animatedProjectImage: document.getElementById('animatedProjectImage'),
    mainAnimatedImage: document.getElementById('mainAnimatedImage'),
    firstProjectInGrid: document.querySelector('#project-1')
  };

  // Animation state
  let animationState = {
    scrollY: 0,
    windowHeight: window.innerHeight,
    progress: 0,
    isAnimating: false
  };

  let mainTimeline;

  // Initialize GSAP animations
  function initializeGSAPAnimations() {
    const gsap = window.gsap;
    if (!gsap || !elements.animatedProjectImage) return;

    // Create main timeline
    mainTimeline = gsap.timeline({ paused: true });

    // Set initial state
    gsap.set(elements.animatedProjectImage, {
      top: '100vh',
      left: '0',
      width: '100vw',
      height: '100vh',
      opacity: 0,
      borderRadius: '0px'
    });

    // Create animation sequence
    mainTimeline
      .to(elements.animatedProjectImage, {
        top: '0vh',
        opacity: 1,
        duration: 1,
        ease: "power2.out"
      })
      .to(elements.animatedProjectImage, {
        top: '12vh',
        left: '38vw',
        width: '60vw',
        height: '60vh',
        borderRadius: '12px',
        opacity: 0,
        duration: 1,
        ease: "power2.out"
      });
  }

  // Enhanced scroll sidebar function
  function scrollSidebarToActiveProject(activeItem) {
    if (!elements.projectsSidebar || !activeItem) return;
    
    const gsap = window.gsap;
    const sidebarRect = elements.projectsSidebar.getBoundingClientRect();
    const activeItemRect = activeItem.getBoundingClientRect();
    
    const activeItemTop = activeItemRect.top - sidebarRect.top;
    const activeItemBottom = activeItemRect.bottom - sidebarRect.top;
    
    const sidebarHeight = elements.projectsSidebar.clientHeight;
    const sidebarScrollTop = elements.projectsSidebar.scrollTop;
    
    // Smooth scroll with GSAP if available, fallback to native
    if (gsap) {
      if (activeItemTop < 0) {
        gsap.to(elements.projectsSidebar, {
          scrollTop: sidebarScrollTop + activeItemTop - 20,
          duration: 0.5,
          ease: "power2.out"
        });
      } else if (activeItemBottom > sidebarHeight) {
        gsap.to(elements.projectsSidebar, {
          scrollTop: sidebarScrollTop + (activeItemBottom - sidebarHeight) + 20,
          duration: 0.5,
          ease: "power2.out"
        });
      }
    } else {
      // Fallback to native scrolling
      if (activeItemTop < 0) {
        elements.projectsSidebar.scrollTo({
          top: sidebarScrollTop + activeItemTop - 20,
          behavior: 'smooth'
        });
      } else if (activeItemBottom > sidebarHeight) {
        elements.projectsSidebar.scrollTo({
          top: sidebarScrollTop + (activeItemBottom - sidebarHeight) + 20,
          behavior: 'smooth'
        });
      }
    }
  }

  // Project interaction handler
  function setupProjectInteractions() {
    elements.projectItems.forEach((item) => {
      item.addEventListener('click', () => {
        // Remove active class from all items
        elements.projectItems.forEach((pi) => pi.classList.remove('active'));
        item.classList.add('active');
        
        const targetId = item.dataset.scrollTarget || null;
        if (targetId) {
          const targetImage = document.getElementById(targetId);
          
          if (targetImage) {
            const navHeight = 80;
            const elementPosition = targetImage.getBoundingClientRect().top;
            const offsetPosition = elementPosition + window.pageYOffset - navHeight;
            
            const gsap = window.gsap;
            if (gsap) {
              // Smooth scroll with GSAP
              gsap.to(window, {
                scrollTo: {
                  y: offsetPosition,
                  autoKill: false
                },
                duration: 1,
                ease: "power2.out"
              });
              
              // Highlight animation
              gsap.timeline()
                .to(targetImage, {
                  y: -15,
                  boxShadow: "0 40px 100px rgba(0, 0, 0, 0.25)",
                  duration: 0.6,
                  ease: "power2.out"
                })
                .to(targetImage.querySelector('.project-image'), {
                  scale: 1.02,
                  duration: 0.6,
                  ease: "power2.out"
                }, 0)
                .to(targetImage, {
                  y: 0,
                  boxShadow: "0 20px 60px rgba(0, 0, 0, 0.15)",
                  duration: 0.6,
                  ease: "power2.out",
                  delay: 1.4
                })
                .to(targetImage.querySelector('.project-image'), {
                  scale: 1,
                  duration: 0.6,
                  ease: "power2.out"
                }, "-=0.6");
            } else {
              // Fallback to native scroll
              window.scrollTo({
                top: offsetPosition,
                behavior: 'smooth'
              });
              
              // Simple highlight effect
              targetImage.style.transform = 'translateY(-15px)';
              targetImage.style.boxShadow = '0 40px 100px rgba(0, 0, 0, 0.25)';
              
              setTimeout(() => {
                targetImage.style.transform = 'translateY(0)';
                targetImage.style.boxShadow = '0 20px 60px rgba(0, 0, 0, 0.15)';
              }, 2000);
            }
          }
        }
      });
    });
  }

  // Main scroll animation handler
  function handleScroll() {
    const scrollY = window.scrollY;
    const windowHeight = window.innerHeight;
    
    // Update animation state
    animationState = {
      ...animationState,
      scrollY,
      windowHeight
    };
    
    // Calculate positions - matching your layout exactly
    const heroHeight = windowHeight * 1.1; // 110vh from scrollSpacer
    const projectsSectionPadding = windowHeight * 0.12; // 12vh padding-top
    const firstProjectPosition = heroHeight + projectsSectionPadding;
    const scrollStart = firstProjectPosition - windowHeight;
    const scrollRange = windowHeight * 2;
    
    const gsap = window.gsap;
    
    // Sidebar visibility
    if (scrollY > windowHeight * 0.8) {
      if (elements.projectsSidebar && !elements.projectsSidebar.classList.contains('visible')) {
        if (gsap) {
          gsap.to(elements.projectsSidebar, {
            opacity: 1,
            x: 0,
            duration: 0.8,
            ease: "power2.out"
          });
        } else {
          elements.projectsSidebar.style.opacity = '1';
          elements.projectsSidebar.style.transform = 'translateX(0)';
        }
        elements.projectsSidebar.classList.add('visible');
      }
    } else {
      if (elements.projectsSidebar && elements.projectsSidebar.classList.contains('visible')) {
        if (gsap) {
          gsap.to(elements.projectsSidebar, {
            opacity: 0,
            x: -100,
            duration: 0.8,
            ease: "power2.out"
          });
        } else {
          elements.projectsSidebar.style.opacity = '0';
          elements.projectsSidebar.style.transform = 'translateX(-100px)';
        }
        elements.projectsSidebar.classList.remove('visible');
      }
    }
    
    if (!elements.animatedProjectImage) return;
    
    // Calculate progress
    const progress = Math.min((scrollY - scrollStart) / scrollRange, 1);
    animationState.progress = Math.max(0, progress);
    
    // Update timeline progress with GSAP or fallback
    if (gsap && mainTimeline) {
      mainTimeline.progress(animationState.progress);
    } else {
      // Fallback animation without GSAP
      fallbackAnimation(animationState.progress);
    }
    
    // Handle first project grid visibility
    if (elements.firstProjectInGrid) {
      if (progress < 0.5) {
        const moveProgress = progress / 0.5;
        const opacity = 1 - moveProgress * 0.5;
        if (gsap) {
          gsap.set(elements.firstProjectInGrid, { opacity });
        } else {
          elements.firstProjectInGrid.style.opacity = opacity;
        }
      } else {
        const shrinkProgress = (progress - 0.5) / 0.5;
        const opacity = 0.5 + shrinkProgress * 0.5;
        if (gsap) {
          gsap.set(elements.firstProjectInGrid, { opacity });
        } else {
          elements.firstProjectInGrid.style.opacity = opacity;
        }
      }
      
      if (progress >= 1) {
        if (gsap) {
          gsap.set(elements.firstProjectInGrid, { opacity: 1 });
        } else {
          elements.firstProjectInGrid.style.opacity = '1';
        }
      }
    }
  }

  // Fallback animation for when GSAP is not available
  function fallbackAnimation(progress) {
    if (!elements.animatedProjectImage) return;
    
    if (progress < 0.5) {
      // Phase 1: Move up and fade in
      const moveProgress = progress / 0.5;
      const top = 100 - (moveProgress * 100);
      
      elements.animatedProjectImage.style.top = `${top}vh`;
      elements.animatedProjectImage.style.left = '0';
      elements.animatedProjectImage.style.width = '100vw';
      elements.animatedProjectImage.style.height = '100vh';
      elements.animatedProjectImage.style.opacity = moveProgress;
      elements.animatedProjectImage.style.borderRadius = '0px';
    } else {
      // Phase 2: Shrink and move to position
      const shrinkProgress = (progress - 0.5) / 0.5;
      const top = 0 + (shrinkProgress * 12);
      const left = 0 + (shrinkProgress * 38);
      const width = 100 - (shrinkProgress * 40);
      const height = 100 - (shrinkProgress * 40);
      
      elements.animatedProjectImage.style.top = `${top}vh`;
      elements.animatedProjectImage.style.left = `${left}vw`;
      elements.animatedProjectImage.style.width = `${width}vw`;
      elements.animatedProjectImage.style.height = `${height}vh`;
      elements.animatedProjectImage.style.opacity = 1 - shrinkProgress;
      elements.animatedProjectImage.style.borderRadius = `${shrinkProgress * 12}px`;
    }
    
    if (progress >= 1) {
      elements.animatedProjectImage.style.opacity = '0';
    }
  }

  // Highlight active project
  function highlightActiveProject() {
    const scrollPosition = window.scrollY + window.innerHeight / 2;
    
    elements.imageItems.forEach((image) => {
      const rect = image.getBoundingClientRect();
      const imageTop = rect.top + window.scrollY;
      const imageBottom = imageTop + rect.height;
      
      if (scrollPosition >= imageTop && scrollPosition <= imageBottom) {
        elements.projectItems.forEach((item) => item.classList.remove('active'));
        const projectName = image.dataset.project;
        if (projectName) {
          const correspondingItem = document.querySelector(`.project-item[data-project="${projectName}"]`);
          if (correspondingItem) {
            correspondingItem.classList.add('active');
            scrollSidebarToActiveProject(correspondingItem);
          }
        }
      }
    });
  }

  // Throttled scroll handler for better performance
  let ticking = false;
  function requestTick() {
    if (!ticking) {
      requestAnimationFrame(() => {
        handleScroll();
        highlightActiveProject();
        ticking = false;
      });
      ticking = true;
    }
  }

  // Initialize everything when DOM is loaded
  function initializeApp() {
    waitForGSAP(() => {
      initializeGSAPAnimations();
      setupProjectInteractions();
      
      // Add scroll listener
      window.addEventListener('scroll', requestTick, { passive: true });
      
      // Initial calls
      handleScroll();
      
      console.log('🚀 App initialized with GSAP animations!');
    });
    
    // Also setup basic functionality immediately (fallback)
    setupProjectInteractions();
    window.addEventListener('scroll', requestTick, { passive: true });
    handleScroll();
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeApp);
  } else {
    initializeApp();
  }

  // Handle window resize
  window.addEventListener('resize', () => {
    animationState.windowHeight = window.innerHeight;
    handleScroll();
  });
</script>

<!-- Load GSAP from CDN -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollToPlugin.min.js"></script>