---
// src/pages/projects.astro
import Layout from '../layouts/Layout.astro';
import { projects } from '../data/projects.js';
import { Image } from 'astro:assets';
import Navigation from '../components/Navigation.astro';
import BottomNavigation from '../components/BottomNavigation.astro';
import ProjectsSidebar from '../components/ProjectsSidebar.astro';

// Group projects by location
const emaarProjects = projects.filter(p => p.location === 'Emaar');
const hmrProjects = projects.filter(p => p.location === 'HMR');
const allProjects = [...emaarProjects, ...hmrProjects];

// Get initial project from URL query param
const url = new URL(Astro.request.url);
const initialProjectId = url.searchParams.get('project');
const initialSection = url.searchParams.get('section'); // 'emaar' or 'hmr'
---

<Layout title="Projects - BYG">
  <Navigation />
  <BottomNavigation />
  <ProjectsSidebar />
  
  <div class="projects-list-container" id="projectsListContainer">
    {allProjects.map((project, index) => (
      <section 
        class="project-section" 
        id={`project-${project.id}`}
        data-project-id={project.id}
        data-project-name={project.name}
        data-project-location={project.location.toLowerCase()}
        data-project-index={index}
      >
        <div class="project-content">
          <div class="project-header">
            <span class="project-number">{project.number}</span>
            <h1 class="project-title">{project.name}</h1>
            <p class="project-location">{project.location}</p>
          </div>
          
          <div class="project-image-container">
            <Image
              src={project.image}
              alt={project.name}
              width={1920}
              height={1080}
              quality={90}
              format="webp"
              class="project-image"
            />
          </div>
          
          <div class="project-details">
            <a href={`/projects/${project.name.toLowerCase().replace(/[\s&]/g, '-').replace(/--+/g, '-')}`} 
               class="view-details-btn">
              View Project Details
            </a>
          </div>
        </div>
      </section>
    ))}
  </div>
</Layout>

<script define:vars={{ initialProjectId, initialSection, projects }}>
  class ProjectsListController {
    constructor() {
      this.sections = document.querySelectorAll('.project-section');
      this.currentIndex = 0;
      this.isScrolling = false;
      this.projects = projects;
      
      // Wait for DOM to be fully ready before initializing
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => this.init());
      } else {
        // Add a small delay to ensure everything is rendered
        setTimeout(() => this.init(), 50);
      }
    }
    
    init() {
      // Set initial scroll position based on URL params
      this.setInitialPosition();
      
      // Setup intersection observer for URL updates
      this.setupIntersectionObserver();
      
      // Setup scroll behavior
      this.setupScrollBehavior();
      
      // Handle navigation clicks
      this.setupNavigationHandlers();
      
      // Show sidebar after initialization
      const sidebar = document.getElementById('projectsSidebar');
      if (sidebar) {
        setTimeout(() => {
          sidebar.classList.add('visible');
        }, 300);
      }
    }
    
    setInitialPosition() {
      let targetIndex = 0;
      
      console.log('Initial params:', { initialProjectId, initialSection });
      console.log('All sections:', this.sections.length);
      
      if (initialProjectId) {
        // Find project by ID - iterate through sections to find matching project
        this.sections.forEach((section, index) => {
          if (section.dataset.projectId === initialProjectId) {
            targetIndex = index;
            console.log(`Found project ${initialProjectId} at index ${index}`);
          }
        });
      } else if (initialSection === 'hmr') {
        // Find first HMR project
        this.sections.forEach((section, index) => {
          if (section.dataset.projectLocation === 'hmr' && targetIndex === 0) {
            targetIndex = index;
            console.log(`Found first HMR project at index ${index}`);
          }
        });
      } else if (initialSection === 'emaar') {
        // Explicitly handle emaar section (should be 0, but let's be sure)
        targetIndex = 0;
      }
      
      // Perform the scroll
      if (targetIndex >= 0 && targetIndex < this.sections.length) {
        const targetSection = this.sections[targetIndex];
        if (targetSection) {
          console.log('Scrolling to section at index:', targetIndex);
          // Use a longer delay to ensure everything is loaded
          setTimeout(() => {
            targetSection.scrollIntoView({ behavior: 'instant', block: 'start' });
            // Update current index
            this.currentIndex = targetIndex;
          }, 200);
        }
      }
    }
    
    setupIntersectionObserver() {
      // Add a delay before starting to observe URL changes
      let observerActive = false;
      setTimeout(() => {
        observerActive = true;
      }, 1000); // Wait 1 second before activating URL updates
      
      const options = {
        root: null,
        rootMargin: '-50% 0px -50% 0px',
        threshold: 0
      };
      
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting && observerActive && !this.isScrolling) {
            const projectId = entry.target.dataset.projectId;
            const projectName = entry.target.dataset.projectName;
            const projectLocation = entry.target.dataset.projectLocation;
            
            // Update URL without page reload
            const newUrl = `/projects?project=${projectId}&section=${projectLocation}`;
            const state = { projectId, projectName, projectLocation };
            
            if (window.location.search !== `?project=${projectId}&section=${projectLocation}`) {
              window.history.replaceState(state, '', newUrl);
            }
            
            // Update current index
            this.currentIndex = parseInt(entry.target.dataset.projectIndex);
          }
        });
      }, options);
      
      this.sections.forEach(section => {
        observer.observe(section);
      });
    }
    
    setupScrollBehavior() {
      // Smooth scroll with keyboard navigation
      document.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowDown' || e.key === 'ArrowUp') {
          e.preventDefault();
          
          if (e.key === 'ArrowDown' && this.currentIndex < this.sections.length - 1) {
            this.scrollToProject(this.currentIndex + 1);
          } else if (e.key === 'ArrowUp' && this.currentIndex > 0) {
            this.scrollToProject(this.currentIndex - 1);
          }
        }
      });
      
      // Add scroll snap behavior
      const container = document.getElementById('projectsListContainer');
      if (container) {
        container.style.scrollSnapType = 'y mandatory';
      }
    }
    
    setupNavigationHandlers() {
      // Handle bottom navigation clicks
      document.addEventListener('click', (e) => {
        const link = e.target.closest('a[href^="#"]');
        if (link) {
          e.preventDefault();
          const section = link.getAttribute('href').substring(1);
          
          if (section === 'emaar') {
            this.scrollToProject(0);
          } else if (section === 'hmr') {
            const hmrIndex = this.projects.findIndex(p => p.location === 'HMR');
            if (hmrIndex !== -1) {
              this.scrollToProject(hmrIndex);
            }
          }
        }
      });
    }
    
    scrollToProject(index) {
      if (index >= 0 && index < this.sections.length) {
        this.isScrolling = true;
        const targetSection = this.sections[index];
        
        targetSection.scrollIntoView({ 
          behavior: 'smooth', 
          block: 'start' 
        });
        
        setTimeout(() => {
          this.isScrolling = false;
        }, 1000);
      }
    }
  }
  
  // Initialize controller when DOM is ready
  // Don't initialize immediately - wait for page to be fully loaded
  if (document.readyState === 'complete') {
    new ProjectsListController();
  } else {
    window.addEventListener('load', () => {
      new ProjectsListController();
    });
  }
</script>

<style>
  .projects-list-container {
    width: 100%;
    height: 100vh;
    overflow-y: scroll;
    overflow-x: hidden;
    scroll-behavior: smooth;
    position: relative;
  }
  
  .project-section {
    min-height: 100vh;
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    scroll-snap-align: start;
    background: #fff;
  }
  
  .project-section:nth-child(even) {
    background: #f8f8f8;
  }
  
  .project-content {
    width: 100%;
    max-width: 1400px;
    margin: 0 auto;
    padding: 60px 40px;
    display: grid;
    grid-template-columns: 1fr 2fr;
    gap: 60px;
    align-items: center;
  }
  
  .project-header {
    display: flex;
    flex-direction: column;
    gap: 20px;
  }
  
  .project-number {
    font-size: 14px;
    color: #999;
    font-weight: 500;
  }
  
  .project-title {
    font-size: clamp(48px, 6vw, 80px);
    font-weight: 600;
    line-height: 1.1;
    color: #333;
    margin: 0;
  }
  
  .project-location {
    font-size: 18px;
    color: #666;
    font-weight: 400;
  }
  
  .project-image-container {
    width: 100%;
    height: 70vh;
    overflow: hidden;
    border-radius: 16px;
    box-shadow: 0 40px 80px rgba(0, 0, 0, 0.15);
  }
  
  .project-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.6s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .project-section:hover .project-image {
    transform: scale(1.05);
  }
  
  .project-details {
    grid-column: 1 / -1;
    text-align: center;
    margin-top: 40px;
  }
  
  .view-details-btn {
    display: inline-block;
    padding: 16px 40px;
    background: #333;
    color: white;
    text-decoration: none;
    border-radius: 8px;
    font-weight: 500;
    transition: all 0.3s ease;
  }
  
  .view-details-btn:hover {
    background: #000;
    transform: translateY(-2px);
  }
  
  /* Mobile responsive */
  @media (max-width: 1024px) {
    .project-content {
      grid-template-columns: 1fr;
      gap: 40px;
      padding: 40px 20px;
    }
    
    .project-header {
      text-align: center;
    }
    
    .project-image-container {
      height: 50vh;
    }
  }
  
  /* Hide scrollbar but keep functionality */
  .projects-list-container::-webkit-scrollbar {
    width: 0px;
    background: transparent;
  }
</style>