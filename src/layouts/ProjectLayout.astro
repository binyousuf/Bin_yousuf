---
// src/layouts/ProjectLayout.astro - Refactored version
import type { ProjectData } from '../types/project';
import { Image } from 'astro:assets';
import { projects } from '../data/projects.js';
import ContactForm from '../components/ContactForm.tsx';
import ProjectAmenities from '../components/ProjectDetail/ProjectAmenities.tsx';
import StickyWhatsAppButton from '../components/StickyWhatsAppButton.tsx';
import Footer from '../components/Footer.tsx';
import { projectCompletionDates, projectFloors, projectApartmentTypes } from '../types/project';

export interface Props {
    project: ProjectData;
}

const { project } = Astro.props;

// Server-side text formatting function
function formatProjectText(rawText: string): string {
    if (!rawText) return '';
    
    const lines = rawText.split('\n').filter(line => line.trim() !== '');
    let html = '';
    let inList = false;
    
    for (let i = 0; i < lines.length; i++) {
        const line = lines[i].trim();
        
        // Check if this line is a bullet point (starts with - or •)
        if (line.startsWith('- ') || line.startsWith('• ')) {
            if (!inList) {
                html += '<ul class="key-features-list mb-6 pl-0 list-none">';
                inList = true;
            }
            const listItem = line.substring(2).trim(); // Remove the dash/bullet and space
            html += `<li class="key-features-item relative pl-6 mb-1 text-sm text-gray-600 leading-relaxed">${listItem}</li>`;
        } else {
            // If we were in a list and this line is not a bullet point, close the list
            if (inList) {
                html += '</ul>';
                inList = false;
            }
            
            // Check if this is a heading (ends with colon and has no period)
            if (line.endsWith(':') && !line.includes('.')) {
                html += `<h4 class="key-features-heading text-base font-semibold text-gray-800 font-['Poppins',sans-serif] mt-8 mb-4 first:mt-0">${line}</h4>`;
            } else {
                html += `<p class="text-sm text-gray-600 font-['Poppins',sans-serif] leading-relaxed mb-5 last:mb-0">${line}</p>`;
            }
        }
    }
    
    // Close list if we end with list items
    if (inList) {
        html += '</ul>';
    }
    
    return html;
}

// Format the about project content server-side
const formattedAboutContent = formatProjectText(project.aboutProject);
const allProjects = projects;
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{project.name}</title>
    <meta name="description" content={project.description}>
    
    <!-- Performance and anti-flicker meta tags -->
    <meta name="color-scheme" content="light">
    <meta name="theme-color" content="#ffffff">
    <meta name="robots" content="index, follow">
    
    <!-- DNS prefetch and preconnect for performance -->
    <link rel="dns-prefetch" href="//wa.me">
    <link rel="preconnect" href="https://fonts.googleapis.com" crossorigin>
    
    <!-- Critical inline styles to prevent any layout shift and flicker -->
    <style>
        /* Reset and base styles */
        * { margin: 0; padding: 0; box-sizing: border-box; }
        html { height: 100%; }
        body { 
            font-family: system-ui, -apple-system, sans-serif; 
            background: #fff; 
            color: #333; 
            min-height: 100vh;
            overflow-x: hidden;
        }
        
        /* Prevent FOUC */
        .project-main { opacity: 1; }
        
        /* Header styles */
        .fixed { position: fixed; }
        .top-0 { top: 0; }
        .left-0 { left: 0; }
        .right-0 { right: 0; }
        .z-\[1000\] { z-index: 1000; }
        .bg-white\/95 { background-color: rgba(255, 255, 255, 0.95); }
        .backdrop-blur-md { backdrop-filter: blur(12px); }
        .border-b { border-bottom-width: 1px; }
        .border-black\/10 { border-color: rgba(0, 0, 0, 0.1); }
        .px-4 { padding-left: 1rem; padding-right: 1rem; }
        .flex { display: flex; }
        .justify-between { justify-content: space-between; }
        .items-center { align-items: center; }
        .max-w-\[1400px\] { max-width: 1400px; }
        .mx-auto { margin-left: auto; margin-right: auto; }
        .gap-5 { gap: 1.25rem; }
        
        /* Layout styles */
        .w-full { width: 100%; }
        .h-screen { height: 100vh; min-height: 600px; }
        .relative { position: relative; }
        .overflow-hidden { overflow: hidden; }
        .h-full { height: 100%; }
        .object-cover { object-fit: cover; }
        .object-center { object-position: center; }
        .absolute { position: absolute; }
        .inset-0 { top: 0; right: 0; bottom: 0; left: 0; }
        .py-16 { padding-top: 4rem; padding-bottom: 4rem; }
        .bg-white { background-color: #fff; }
        .text-center { text-align: center; }
        .grid { display: grid; }
        .grid-cols-1 { grid-template-columns: repeat(1, minmax(0, 1fr)); }
        .gap-16 { gap: 4rem; }
        .pt-5 { padding-top: 1.25rem; }
        
        /* Typography */
        .text-base { font-size: 1rem; line-height: 1.5; }
        .font-medium { font-weight: 500; }
        .mb-5 { margin-bottom: 1.25rem; }
        .text-gray-700 { color: #374151; }
        .font-semibold { font-weight: 600; }
        .text-gray-800 { color: #1f2937; }
        .mt-8 { margin-top: 2rem; }
        .mb-4 { margin-bottom: 1rem; }
        .mb-6 { margin-bottom: 1.5rem; }
        .pl-0 { padding-left: 0; }
        .list-none { list-style: none; }
        .pl-6 { padding-left: 1.5rem; }
        .mb-1 { margin-bottom: 0.25rem; }
        .text-sm { font-size: 0.875rem; line-height: 1.25; }
        .text-gray-600 { color: #4b5563; }
        .leading-relaxed { line-height: 1.625; }
        .hidden { display: none !important; }
        .block { display: block; }
        
        /* Image loading optimization */
        img { 
            display: block; 
            max-width: 100%; 
            height: auto;
            background-color: #f9fafb;
        }
        
        /* Prevent image flicker during load */
        .hero-image-container {
            background-color: #f9fafb;
            background-image: linear-gradient(45deg, #f9fafb 25%, transparent 25%), 
                            linear-gradient(-45deg, #f9fafb 25%, transparent 25%), 
                            linear-gradient(45deg, transparent 75%, #f9fafb 75%), 
                            linear-gradient(-45deg, transparent 75%, #f9fafb 75%);
            background-size: 20px 20px;
            background-position: 0 0, 0 10px, 10px -10px, -10px 0px;
        }
        
        /* Bullet points for Key Features */
        .key-features-item::before {
            content: '•';
            position: absolute;
            left: 0;
            top: 0;
            color: #1f2937;
            font-weight: bold;
            font-size: 1rem;
        }
        
        /* Component loading states */
        .component-loading {
            min-height: 200px;
            background-color: #f9fafb;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        /* Responsive breakpoints */
        @media (min-width: 1024px) {
            .lg\:grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }
            .lg\:gap-20 { gap: 5rem; }
            .lg\:sticky { position: sticky; }
            .lg\:top-\[120px\] { top: 120px; }
        }
        
        /* Smooth transitions for components */
        .fade-in {
            opacity: 0;
            transition: opacity 0.3s ease-in-out;
        }
        .fade-in.loaded {
            opacity: 1;
        }
        
        /* Loading animations */
        .animate-spin {
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }
        
        /* Prevent hydration flash */
        astro-island {
            display: contents;
        }
        
        /* Component transition optimization */
        [data-astro-cid-*] {
            contain: layout;
        }
        
        /* Button styles to prevent flicker */
        button {
            -webkit-appearance: none;
            appearance: none;
            background: transparent;
            border: none;
            outline: none;
        }
        
        .btn-primary {
            display: inline-flex;
            align-items: center;
            gap: 0.75rem;
            background-color: #121212;
            color: white;
            border: none;
            padding: 14px 28px;
            border-radius: 8px;
            font-size: 0.875rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            font-family: 'Poppins', sans-serif;
            box-shadow: 0 4px 15px rgba(76, 76, 76, 0.3);
            text-decoration: none;
            border: 0;
            outline: 0;
        }
        
        .btn-primary:hover {
            background-color: black;
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(18, 18, 18, 0.4);
        }
        
        .btn-primary svg {
            width: 18px;
            height: 18px;
            stroke-width: 2;
        }
        
        /* Prevent button layout shifts */
        .button-container {
            min-height: 56px;
            display: flex;
            align-items: center;
        }
    </style>
    
    <!-- Preload hero image -->
    <link rel="preload" href={project.heroImage.src.src || project.heroImage.src} as="image" type="image/webp">
    
    <!-- Critical JavaScript to prevent button flicker -->
    <script define:vars={{project}}>
        // Define WhatsApp function immediately to prevent flicker
        window.openWhatsApp = function() {
            const projectName = project.name;
            const message = `Hi! I'm interested in learning more about EMAAR & HMR waterfront properties. Could you please provide me with more information about ${projectName}?`;
            const whatsappUrl = `https://wa.me/923360878079?text=${encodeURIComponent(message)}`;
            window.open(whatsappUrl, '_blank');
        };
        
        // Attach event listener as soon as DOM is available
        document.addEventListener('DOMContentLoaded', function() {
            const brochureBtn = document.getElementById('viewBrochureBtn');
            if (brochureBtn) {
                brochureBtn.addEventListener('click', window.openWhatsApp);
            }
        });
    </script>
</head>
<body>
    <!-- Header -->
    <header class="fixed top-0 left-0 right-0 bg-white/95 backdrop-blur-md z-[1000] border-b border-black/10 px-4">
        <div class="flex justify-between items-center max-w-[1400px] mx-auto">
            <div class="flex items-center gap-5">
                <button class="bg-none border-none text-2xl text-gray-400 cursor-pointer p-1 transition-colors duration-300 hover:text-gray-700 font-inherit" id="closeBtn">×</button>
                <div class="relative">
                    <button class="bg-none border-none text-lg font-medium text-gray-700 cursor-pointer flex items-center gap-2 px-3 py-2 rounded-md transition-all duration-300 hover:bg-gray-100 font-['Poppins',sans-serif]" id="projectDropdownBtn">
                        {project.name}
                        <svg class="transition-transform duration-300" width="12" height="12" viewBox="0 0 12 12" fill="none">
                            <path d="M3 4.5L6 7.5L9 4.5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                    </button>
                    <div class="hidden absolute top-full left-0 bg-white border border-gray-300 shadow-[0_10px_30px_rgba(0,0,0,0.1)] min-w-[300px] max-h-[400px] overflow-y-auto z-[1001]" id="projectDropdownMenu">
                        {allProjects.map((proj) => (
                            <a 
                                href={`/projects/${proj.name.toLowerCase().replace(/[\s&]/g, '-').replace(/--+/g, '-')}`}
                                class={`flex items-center gap-3 px-4 py-3 no-underline text-gray-700 transition-colors duration-300 border-b border-gray-100 last:border-b-0 hover:bg-gray-50 font-['Poppins',sans-serif] ${proj.name === project.name ? 'bg-black text-white' : ''}`}
                            >
                                <span class={`text-xs min-w-[30px] font-medium ${proj.name === project.name ? 'text-white/80' : 'text-gray-400'}`}>{proj.number}</span>
                                <span class="flex-1 text-sm font-medium">{proj.name}</span>
                                <span class={`text-xs font-normal ${proj.name === project.name ? 'text-white/90' : 'text-gray-500'}`}>{proj.location}</span>
                            </a>
                        ))}
                    </div>
                </div>
            </div>
            <div class="flex items-center">
                <button class="bg-none border-none text-gray-400 text-sm font-normal cursor-pointer px-3 py-2 rounded-md transition-all duration-300 hover:text-gray-700 hover:bg-gray-100 font-['Poppins',sans-serif]" id="openGalleryBtn">Gallery</button>
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <main class="project-main">
        <!-- Hero Section -->
        <section class="w-full h-screen relative overflow-hidden hero-image-container">
            <div class="w-full h-full relative cursor-pointer fade-in" onclick="openGalleryModal(0)" id="heroImageContainer">
                <Image 
                    src={project.heroImage.src} 
                    alt={project.heroImage.alt}
                    width={1920}
                    height={1080}
                    class="w-full h-full object-cover object-center hero-image"
                    loading="eager"
                    decoding="sync"
                />
                <div class="absolute inset-0 bg-black/40 flex items-center justify-center opacity-0 transition-opacity duration-300 cursor-pointer hover:opacity-100">
                    <div class="text-white bg-white/20 p-4 rounded-full backdrop-blur-md transition-all duration-300 hover:bg-white/30 hover:scale-110">
                        <svg class="w-6 h-6 stroke-[1.5]" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                            <circle cx="11" cy="11" r="8"/>
                            <path d="M21 21l-4.35-4.35"/>
                        </svg>
                    </div>
                </div>
            </div>
        </section>

        <!-- Hero Text Section -->
        <section class="py-16 md:py-20 bg-white">
            <div class="max-w-[1400px] mx-auto px-4 md:px-6 lg:px-10 text-center">
                <p class="text-xl md:text-2xl lg:text-3xl xl:text-[32px] font-normal leading-[1.4] text-[#4c4c4c] max-w-[900px] mx-auto font-['Poppins',sans-serif]">{project.description}</p>
            </div>
        </section>

        <!-- Project Info Section -->
        <section class="py-16 md:py-20 bg-white">
            <div class="max-w-[1400px] mx-auto px-4 md:px-6 lg:px-10">
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-16 lg:gap-20 xl:gap-24 items-start">
                    <div class="lg:sticky lg:top-[120px]">
                        <Image 
                            src={project.heroImage.src} 
                            alt={project.heroImage.alt} 
                            width={600} 
                            height={400} 
                            class="w-full h-auto block rounded-lg"
                        />
                    </div>
                    <div class="pt-5">
                        <!-- Project Specifications -->
                        <div class="mb-16">
                            <div class="flex flex-col md:flex-row md:items-baseline py-[15px] border-b border-gray-100 gap-2 md:gap-0 last:border-b-0">
                                <span class="font-medium text-gray-700 min-w-[150px] text-sm font-['Poppins',sans-serif] md:font-semibold">Planning:</span>
                                <span class="font-normal text-gray-500 text-sm flex-1 font-['Poppins',sans-serif]">{project.info.typology.join(', ')}</span>
                            </div>
                            <div class="flex flex-col md:flex-row md:items-baseline py-[15px] border-b border-gray-100 gap-2 md:gap-0 last:border-b-0">
                                <span class="font-medium text-gray-700 min-w-[150px] text-sm font-['Poppins',sans-serif] md:font-semibold">Status:</span>
                                <span class="font-normal text-gray-500 text-sm flex-1 font-['Poppins',sans-serif]">{project.info.status}</span>
                            </div>
                            <div class="flex flex-col md:flex-row md:items-baseline py-[15px] border-b border-gray-100 gap-2 md:gap-0 last:border-b-0">
                                <span class="font-medium text-gray-700 min-w-[150px] text-sm font-['Poppins',sans-serif] md:font-semibold">Apartment types:</span>
                                <span class="font-normal text-gray-500 text-sm flex-1 font-['Poppins',sans-serif]">{projectApartmentTypes[project.id] || 'TBA'}</span>
                            </div>
                            <div class="flex flex-col md:flex-row md:items-baseline py-[15px] border-b border-gray-100 gap-2 md:gap-0 last:border-b-0">
                                <span class="font-medium text-gray-700 min-w-[150px] text-sm font-['Poppins',sans-serif] md:font-semibold">Floors:</span>
                                <span class="font-normal text-gray-500 text-sm flex-1 font-['Poppins',sans-serif]">{projectFloors[project.id] || 'TBA'}</span>
                            </div>
                            <div class="flex flex-col md:flex-row md:items-baseline py-[15px] border-b border-gray-100 gap-2 md:gap-0 last:border-b-0">
                                <span class="font-medium text-gray-700 min-w-[150px] text-sm font-['Poppins',sans-serif] md:font-semibold">Completion date:</span>
                                <span class="font-normal text-gray-500 text-sm flex-1 font-['Poppins',sans-serif]">{projectCompletionDates[project.id] || 'TBA'}</span>
                            </div>
                        </div>
                        
                        <!-- View Brochure Button -->
                        <div class="mt-[30px] pt-5 border-t border-gray-100">
                            <div class="button-container">
                                <button class="btn-primary" id="viewBrochureBtn">
                                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                        <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"/>
                                        <polyline points="14,2 14,8 20,8"/>
                                        <line x1="16" y1="13" x2="8" y2="13"/>
                                        <line x1="16" y1="17" x2="8" y2="17"/>
                                        <polyline points="10,9 9,9 8,9"/>
                                    </svg>
                                    View Brochure
                                </button>
                            </div>
                        </div>
                        
                        <!-- About Project Section -->
                        <div class="pt-5">
                            <h3 class="text-base font-medium mb-5 text-gray-700 font-['Poppins',sans-serif]">About project:</h3>
                            <div class="about-text">
                                <div id="about-project-content" class="prose-content">
                                    <Fragment set:html={formattedAboutContent} />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
        
        <!-- Project Amenities Section -->
        <ProjectAmenities projectId={project.id} client:visible />

        <!-- Gallery Section -->
        {project.galleryImages && project.galleryImages.length > 0 && (
            <section class="py-20 md:py-24 bg-white">
                <div class="max-w-[1400px] mx-auto px-4 md:px-6 lg:px-10 flex flex-col gap-16 md:gap-20">
                    {project.galleryImages.map((image, index) => (
                        <div class={`w-full flex cursor-pointer ${index % 2 === 0 ? 'justify-start' : 'justify-end'} md:${index % 2 === 0 ? 'justify-start' : 'justify-end'} justify-center`} 
                             onclick={`openGalleryModal(${index + 1})`}>
                            <div class={`relative overflow-hidden shadow-[0_20px_60px_rgba(0,0,0,0.1)] transition-all duration-[400ms] ease-[cubic-bezier(0.4,0,0.2,1)] hover:-translate-y-2.5 hover:shadow-[0_40px_100px_rgba(0,0,0,0.2)] w-full max-w-full md:max-w-[85%] lg:max-w-[75%]`}>
                                <Image 
                                    src={image.src} 
                                    alt={image.alt}
                                    width={1200}
                                    height={800}
                                    class="w-full h-auto block transition-transform duration-[600ms] ease-[cubic-bezier(0.4,0,0.2,1)] hover:scale-105"
                                    loading={index < 2 ? "eager" : "lazy"}
                                />
                                <div class="absolute inset-0 bg-black/40 flex items-center justify-center opacity-0 transition-opacity duration-300 cursor-pointer hover:opacity-100">
                                    <div class="text-white bg-white/20 p-4 rounded-full backdrop-blur-md transition-all duration-300 hover:bg-white/30 hover:scale-110">
                                        <svg class="w-6 h-6 stroke-[1.5]" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                            <circle cx="11" cy="11" r="8"/>
                                            <path d="M21 21l-4.35-4.35"/>
                                        </svg>
                                    </div>
                                </div>
                            </div>
                        </div>
                    ))}
                </div>
            </section>
        )}
        
        <!-- Contact Form -->
        <div class="py-16 md:py-24 bg-gradient-to-br from-gray-50 to-neutral-100" id="contactFormPlaceholder">
            <div class="max-w-3xl mx-auto px-4">
                <div class="text-center mb-10">
                    <div class="inline-block p-3 bg-neutral-100 rounded-full mb-6">
                        <svg class="w-6 h-6 text-neutral-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                        </svg>
                    </div>
                    <h2 class="text-3xl md:text-4xl font-bold text-neutral-900 mb-4">
                        Interested in {project.name}?
                    </h2>
                    <p class="text-lg text-neutral-600 max-w-2xl mx-auto leading-relaxed">
                        Get detailed information about pricing, floor plans, and investment opportunities.
                    </p>
                </div>
                <div class="bg-white rounded-2xl shadow-xl border border-neutral-200 overflow-hidden">
                    <div class="bg-black px-8 py-6">
                        <h3 class="text-xl font-semibold text-white">Contact Information</h3>
                        <p class="text-gray-300 text-sm mt-1">We'll respond within 24 hours</p>
                    </div>
                    <div class="p-8">
                        <div class="text-center text-gray-500">
                            <div class="inline-block animate-spin w-8 h-8 border-4 border-gray-300 border-t-black rounded-full"></div>
                            <p class="mt-4">Loading contact form...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <ContactForm projectName={project.name} client:visible />

        <!-- Navigation Section -->
        <section class="py-16 bg-white">
            <div class="max-w-[1400px] mx-auto px-4 md:px-6 lg:px-10">
                <button class="inline-block text-gray-500 bg-none border-none font-normal text-sm transition-colors duration-300 hover:text-gray-700 font-['Poppins',sans-serif] cursor-pointer no-underline" id="backToProjectsBtn">← Back to Projects</button>
            </div>
        </section>
    </main>

    <!-- Gallery Modal -->
    <div class="fixed top-0 left-0 w-screen h-screen z-[2000] hidden bg-black/95" id="galleryModal">
        <div class="absolute top-0 left-0 w-full h-full bg-transparent flex items-center justify-center" onclick="closeGalleryModal()">
            <div class="relative w-[90vw] h-[85vh] max-w-[1200px] max-h-[800px] bg-white rounded-[20px] overflow-hidden shadow-[0_40px_100px_rgba(0,0,0,0.5)] flex flex-col mx-auto z-[2001]" onclick="event.stopPropagation()">
                <!-- Modal Header -->
                <div class="flex justify-between items-center px-[30px] py-5 bg-white border-b border-black/5 flex-shrink-0">
                    <h3 class="m-0 text-lg font-semibold text-gray-700 font-['Poppins',sans-serif]" id="modalTitle">{project.name} Gallery</h3>
                    <button class="bg-none border-none cursor-pointer text-gray-500 p-2 rounded-full transition-all duration-300 flex items-center justify-center hover:bg-gray-100 hover:text-gray-700" onclick="closeGalleryModal()">
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                            <line x1="18" y1="6" x2="6" y2="18"></line>
                            <line x1="6" y1="6" x2="18" y2="18"></line>
                        </svg>
                    </button>
                </div>
                
                <!-- Main Image Display -->
                <div class="flex-1 flex items-center justify-center bg-gray-50 min-h-0">
                    <div class="relative w-full h-full flex items-center justify-center">
                        <img id="modalMainImage" src="" alt="" class="max-w-[90%] max-h-[90%] object-contain rounded-lg shadow-[0_10px_40px_rgba(0,0,0,0.1)] select-none pointer-events-none transition-opacity duration-300" />
                        
                        <!-- Navigation Arrows -->
                        <button class="absolute top-1/2 -translate-y-1/2 left-[15px] md:left-[30px] bg-white/95 border-none w-[40px] h-[40px] md:w-[50px] md:h-[50px] rounded-full flex items-center justify-center cursor-pointer transition-all duration-300 shadow-[0_4px_20px_rgba(0,0,0,0.1)] text-gray-700 z-10 hover:bg-white hover:scale-110 hover:shadow-[0_6px_30px_rgba(0,0,0,0.2)]" onclick="previousImage()" aria-label="Previous image">
                            <svg width="16" height="16" class="md:w-5 md:h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                <polyline points="15,18 9,12 15,6"></polyline>
                            </svg>
                        </button>
                        <button class="absolute top-1/2 -translate-y-1/2 right-[15px] md:right-[30px] bg-white/95 border-none w-[40px] h-[40px] md:w-[50px] md:h-[50px] rounded-full flex items-center justify-center cursor-pointer transition-all duration-300 shadow-[0_4px_20px_rgba(0,0,0,0.1)] text-gray-700 z-10 hover:bg-white hover:scale-110 hover:shadow-[0_6px_30px_rgba(0,0,0,0.2)]" onclick="nextImage()" aria-label="Next image">
                            <svg width="16" height="16" class="md:w-5 md:h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                <polyline points="9,18 15,12 9,6"></polyline>
                            </svg>
                        </button>
                        
                        <!-- Image Counter -->
                        <div class="absolute top-5 right-5 bg-black/70 text-white px-4 py-2 rounded-[20px] text-sm font-medium font-['Poppins',sans-serif] backdrop-blur-md">
                            <span id="currentImageIndex">1</span> / <span id="totalImages">1</span>
                        </div>
                        
                        <!-- Progress Indicators -->
                        <div class="absolute bottom-5 left-1/2 -translate-x-1/2 flex gap-2 z-10" id="progressIndicators">
                            <!-- Generated by JavaScript -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Sticky WhatsApp Button -->
    <StickyWhatsAppButton client:visible />
    
    <!-- Footer -->
    <Footer client:visible />
</body>
</html>

<!-- No custom CSS - Pure Tailwind only -->

<script define:vars={{ allProjects, project }}>
    // Global Variables
    let currentImageIndex = 0;
    let galleryImages = [];
    let isModalOpen = false;

    // Note: Text formatting is now handled server-side, no client-side formatting needed

    // Gallery Functions
    function initializeGallery() {
        galleryImages = [
            { src: project.heroImage.src.src || project.heroImage.src, alt: project.heroImage.alt },
            ...project.galleryImages.map(img => ({ src: img.src.src || img.src, alt: img.alt }))
        ];
    }

    function getReturnUrl() {
        const projectLocation = project.location.toLowerCase();
        const referrer = document.referrer;
        if (referrer.includes('/projects')) {
            if (referrer.includes('section=emaar') || (referrer.includes('#project-') && projectLocation === 'emaar')) return '/projects?section=emaar';
            if (referrer.includes('#project-') && projectLocation === 'hmr') return '/projects#project-6';
            return '/projects';
        }
        if (projectLocation === 'emaar') return '/projects?section=emaar';
        if (projectLocation === 'hmr') return '/projects#project-6';
        return '/projects';
    }

    // Navigation Functions
    function initializeCloseButton() {
        const closeBtn = document.getElementById('closeBtn');
        if (closeBtn) closeBtn.addEventListener('click', () => { window.location.href = getReturnUrl(); });
    }

    function initializeBackButton() {
        const backBtn = document.getElementById('backToProjectsBtn');
        if (backBtn) backBtn.addEventListener('click', () => { window.location.href = getReturnUrl(); });
    }

    function initializeGalleryButton() {
        const galleryBtn = document.getElementById('openGalleryBtn');
        if (galleryBtn) galleryBtn.addEventListener('click', () => openGalleryModal(0));
    }

    // Dropdown Functions
    function initializeDropdown() {
        const dropdownBtn = document.getElementById('projectDropdownBtn');
        const dropdownMenu = document.getElementById('projectDropdownMenu');
        const arrow = dropdownBtn?.querySelector('svg');
        if (!dropdownBtn || !dropdownMenu) return;
        
        const openDropdown = () => { 
            dropdownMenu.classList.remove('hidden');
            dropdownMenu.classList.add('block');
            if (arrow) arrow.style.transform = 'rotate(180deg)';
        };
        const closeDropdown = () => { 
            dropdownMenu.classList.add('hidden');
            dropdownMenu.classList.remove('block');
            if (arrow) arrow.style.transform = 'rotate(0deg)';
        };
        
        dropdownBtn.addEventListener('click', (e) => { 
            e.stopPropagation(); 
            dropdownMenu.classList.contains('hidden') ? openDropdown() : closeDropdown(); 
        });
        document.addEventListener('click', (e) => { 
            if (!dropdownBtn.contains(e.target) && !dropdownMenu.contains(e.target)) closeDropdown(); 
        });
        document.addEventListener('keydown', (e) => { 
            if (e.key === 'Escape') closeDropdown(); 
        });
    }

    // Modal Functions
    window.openGalleryModal = function(imageIndex = 0) {
        const modal = document.getElementById('galleryModal');
        if (!modal) return;
        currentImageIndex = imageIndex;
        isModalOpen = true;
        modal.classList.remove('hidden');
        modal.classList.add('flex');
        document.body.style.overflow = 'hidden';
        updateModalImage();
        createProgressIndicators();
        document.addEventListener('keydown', handleKeyboardNavigation);
    };

    window.closeGalleryModal = function() {
        const modal = document.getElementById('galleryModal');
        if (!modal) return;
        isModalOpen = false;
        modal.classList.add('hidden');
        modal.classList.remove('flex');
        document.body.style.overflow = '';
        document.removeEventListener('keydown', handleKeyboardNavigation);
    };

    function updateModalImage() {
        const modalImage = document.getElementById('modalMainImage');
        const currentIndexEl = document.getElementById('currentImageIndex');
        const totalImagesEl = document.getElementById('totalImages');
        if (!modalImage || !galleryImages[currentImageIndex]) return;

        // Add loading state
        modalImage.classList.add('loading');

        // Preload image for smoother transition
        const img = new Image();
        img.onload = function() {
            modalImage.src = galleryImages[currentImageIndex].src;
            modalImage.alt = galleryImages[currentImageIndex].alt;
            modalImage.classList.remove('loading');
        };
        img.src = galleryImages[currentImageIndex].src;
        
        if (currentIndexEl) {
            currentIndexEl.textContent = currentImageIndex + 1;
        }
        
        if (totalImagesEl) {
            totalImagesEl.textContent = galleryImages.length;
        }

        updateProgressIndicators();
    }

    function createProgressIndicators() {
        const container = document.getElementById('progressIndicators');
        if (!container) return;
        container.innerHTML = '';
        
        // Only show indicators if there are multiple images
        if (galleryImages.length <= 1) return;
        
        galleryImages.forEach((_, index) => {
            const dot = document.createElement('div');
            dot.setAttribute('data-dot', index);
            dot.className = `w-2 h-2 rounded-full cursor-pointer transition-all duration-300 ${index === currentImageIndex ? 'bg-white scale-125' : 'bg-white/50 hover:bg-white/80 hover:scale-110'}`;
            dot.onclick = () => selectImage(index);
            container.appendChild(dot);
        });
    }

    function updateProgressIndicators() {
        const dots = document.querySelectorAll('[data-dot]');
        dots.forEach((dot, index) => {
            if (index === currentImageIndex) {
                dot.className = 'w-2 h-2 rounded-full cursor-pointer transition-all duration-300 bg-white scale-125';
            } else {
                dot.className = 'w-2 h-2 rounded-full cursor-pointer transition-all duration-300 bg-white/50 hover:bg-white/80 hover:scale-110';
            }
        });
    }

    function selectImage(index) {
        if (index >= 0 && index < galleryImages.length) {
            currentImageIndex = index;
            updateModalImage();
        }
    }

    window.previousImage = function() {
        selectImage((currentImageIndex > 0 ? currentImageIndex - 1 : galleryImages.length - 1));
    };

    window.nextImage = function() {
        selectImage((currentImageIndex < galleryImages.length - 1 ? currentImageIndex + 1 : 0));
    };

    function handleKeyboardNavigation(e) {
        if (!isModalOpen) return;
        if (e.key === 'Escape') closeGalleryModal();
        if (e.key === 'ArrowLeft') { e.preventDefault(); previousImage(); }
        if (e.key === 'ArrowRight') { e.preventDefault(); nextImage(); }
    }

    // Parallax Effect
    function initializeParallax() {
        const heroImage = document.querySelector('.hero-image');
        if(!heroImage) return;
        let ticking = false;
        const updateParallax = () => {
            const rate = window.pageYOffset * 0.4;
            heroImage.style.transform = `translateY(${rate}px)`;
            ticking = false;
        };
        window.addEventListener('scroll', () => {
            if (!ticking) {
                window.requestAnimationFrame(updateParallax);
                ticking = true;
            }
        }, { passive: true });
    }

    // Animation Observer
    function initializeAnimations() {
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('visible');
                }
            });
        }, { threshold: 0.1, rootMargin: '0px 0px -50px 0px' });
        document.querySelectorAll('.gallery-item').forEach(item => {
            observer.observe(item);
        });
    }

    // Touch Support for Mobile
    function initializeTouchSupport() {
        let startX = 0;
        let startY = 0;
        
        const modalBody = document.querySelector('.modal-body');
        if (!modalBody) return;

        modalBody.addEventListener('touchstart', function(e) {
            startX = e.touches[0].clientX;
            startY = e.touches[0].clientY;
        }, { passive: true });

        modalBody.addEventListener('touchend', function(e) {
            if (!isModalOpen) return;
            
            const endX = e.changedTouches[0].clientX;
            const endY = e.changedTouches[0].clientY;
            
            const deltaX = endX - startX;
            const deltaY = endY - startY;
            
            // Check if horizontal swipe is longer than vertical and meets minimum distance
            if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > 50) {
                if (deltaX > 0) {
                    previousImage();
                } else {
                    nextImage();
                }
            }
        }, { passive: true });
    }

    // WhatsApp Function
    window.openWhatsApp = function() {
        const projectName = project.name;
        const message = `Hi! I'm interested in learning more about EMAAR & HMR waterfront properties. Could you please provide me with more information about ${projectName}?`;
        const whatsappUrl = `https://wa.me/923360878079?text=${encodeURIComponent(message)}`;
        window.open(whatsappUrl, '_blank');
    };

    // Image Loading Handler
    function initializeImageLoading() {
        const heroContainer = document.getElementById('heroImageContainer');
        const heroImage = document.querySelector('.hero-image');
        
        if (heroImage && heroContainer) {
            heroImage.addEventListener('load', function() {
                heroContainer.classList.add('loaded');
            });
            
            // If image is already cached and loaded
            if (heroImage.complete) {
                heroContainer.classList.add('loaded');
            }
        }
        
        // Hide component loading placeholders when components are ready
        const hideContactFormPlaceholder = () => {
            const placeholder = document.getElementById('contactFormPlaceholder');
            if (placeholder) {
                placeholder.style.opacity = '0';
                placeholder.style.transition = 'opacity 0.3s ease';
                setTimeout(() => {
                    placeholder.style.display = 'none';
                }, 300);
            }
        };
        
        // Observer to detect when React components are mounted
        const componentObserver = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                mutation.addedNodes.forEach((node) => {
                    if (node.nodeType === 1) { // Element node
                        // Check if ContactForm has been rendered
                        if (node.querySelector && node.querySelector('form')) {
                            hideContactFormPlaceholder();
                        }
                    }
                });
            });
        });
        
        componentObserver.observe(document.body, {
            childList: true,
            subtree: true
        });
        
        // Fallback timeout
        setTimeout(hideContactFormPlaceholder, 2000);
    }

    // Main Initialization Function
    function initialize() {
        console.log('Initializing project layout for:', project.name);
        
        // Prioritize image loading and visual stability
        initializeImageLoading();
        
        // Initialize core functionality
        initializeGallery();
        initializeDropdown();
        initializeGalleryButton();
        initializeCloseButton();
        initializeBackButton();
        
        // Initialize performance-heavy features after layout is stable
        requestAnimationFrame(() => {
            initializeParallax();
            initializeAnimations();
            initializeTouchSupport();
        });
        
        console.log('Project layout initialization complete');
    }

    // Initialize immediately if possible to reduce flicker
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initialize);
    } else {
        // DOM is already ready, initialize immediately
        initialize();
    }
</script>